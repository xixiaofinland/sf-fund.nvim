==============================================================================
------------------------------------------------------------------------------
*sf.nvim* Salesforce development plugin
*SfNvim*

MIT License Copyright (c) 2024 Xi Xiao

------------------------------------------------------------------------------
                                                                    *Sf.setup()*
                               `Sf.setup`({opt})
Before using this plugin, it's mandatory to invoke this function by "require'sf'.setup()".
Parameters ~
{opt} `(table|nil)` Optional config table to overwrite default settings.

------------------------------------------------------------------------------
                                                             *Sf.get_target_org*
                              `Sf.get_target_org`
get the value of the plugin internal variable "target_org".
"target_org" is automatically set by |Sf.fetch_org_list| when Nvim is intitiated
or manually by |Sf.set_target_org|.

------------------------------------------------------------------------------
                                                            *Sf.covered_percent*
                              `Sf.covered_percent`
Display the Apex test coverage percent for the current Apex file

------------------------------------------------------------------------------
                                                             *Sf.copy_apex_name*
                              `Sf.copy_apex_name`
A convenient way to quickly copy file name trimming dot-after, e.g. copy "Hello" from "Hello.cls"

------------------------------------------------------------------------------
                                       *Sf.refresh_current_file_covered_percent*
                   `Sf.refresh_current_file_covered_percent`
get latest code coverage percentage info for the current Apex

------------------------------------------------------------------------------
                                                                *Sf.toggle_term*
                                `Sf.toggle_term`
Toggle the SFTerm float window.

------------------------------------------------------------------------------
                                                              *Sf.save_and_push*
                               `Sf.save_and_push`
Save the file in the current buffer and push to target_org.

------------------------------------------------------------------------------
                                                                 *Sf.push_delta*
                                `Sf.push_delta`
Run `sf project deploy start` against the target_org

------------------------------------------------------------------------------
                                                                   *Sf.retrieve*
                                 `Sf.retrieve`
Retrieve the file in the current buffer from target_org.

------------------------------------------------------------------------------
                                                             *Sf.retrieve_delta*
                              `Sf.retrieve_delta`
Run `sf project retrieve start` against the target_org

------------------------------------------------------------------------------
                                                           *Sf.retrieve_package*
                             `Sf.retrieve_package`
Retrieve the file in the current buffer as a manifest from target_org

------------------------------------------------------------------------------
                                                              *Sf.run_anonymous*
                               `Sf.run_anonymous`
Run the file in the current buffer as anonymous apex in target_org

------------------------------------------------------------------------------
                                                                  *Sf.run_query*
                                 `Sf.run_query`
Run the query defined in current buffer in target_org

------------------------------------------------------------------------------
                                                          *Sf.run_tooling_query*
                             `Sf.run_tooling_query`
Run the tooling API query defined in the current buffer in target_org

------------------------------------------------------------------------------
                                                       *Sf.run_highlighted_soql*
                           `Sf.run_highlighted_soql`
Run visual mode highlight selected text as SOQL in the term

------------------------------------------------------------------------------
                                                                     *Sf.cancel*
                                  `Sf.cancel`
Terminate the running command in SFTerm.

------------------------------------------------------------------------------
                                                              *Sf.go_to_sf_root*
                               `Sf.go_to_sf_root`
Enter the sf project root path in SFTerm.

------------------------------------------------------------------------------
                                                                        *Sf.run*
                                    `Sf.run`
Allows to pass the user defined command into SFTerm.

------------------------------------------------------------------------------
                                                             *Sf.fetch_org_list*
                              `Sf.fetch_org_list`
Run "sf org list" command under the hood and stores the org list.
If a target_org is found, the value is saved into "require('sf.util').target_org", an internal variable.

------------------------------------------------------------------------------
                                                             *Sf.set_target_org*
                              `Sf.set_target_org`
Display the list of available orgs, and allow to define the target_org.
Run "sf config set target-org" command under the hood to set the target_org.

------------------------------------------------------------------------------
                                                      *Sf.set_global_target_org*
                           `Sf.set_global_target_org`
Salesforce sf command allows users to define a global target_org.
Run "sf config set target-org --global " command under the hood.

------------------------------------------------------------------------------
                                                         *Sf.diff_in_target_org*
                            `Sf.diff_in_target_org`
Fetch the file in the current buffer from target_org and display in the Nvim diff mode.
The left window displays the target_org verison, the right window displays the remote org verison

------------------------------------------------------------------------------
                                                                *Sf.diff_in_org*
                                `Sf.diff_in_org`
Similar to |Sf.diff_in_target_org|, you can choose which org to diff with.
The left window displays the local verison, the right window displays the remote org verison

------------------------------------------------------------------------------
                                                                   *Sf.org_open*
                                 `Sf.org_open`
Open the target_org in browser

------------------------------------------------------------------------------
Open the current file in the target_org in browser

------------------------------------------------------------------------------
                                                               *Sf.pull_md_json*
                               `Sf.pull_md_json`
Download metadata name list, e.g. Apex names, LWC names, StaticResource names, etc. as Json files into the the project root path "md" folder.

------------------------------------------------------------------------------
                                                        *Sf.list_md_to_retrieve*
                            `Sf.list_md_to_retrieve`
Choose a specific metadata file to retrieve.
Its popup list depends on data retrieved by |Sf.retrieve_metadata_lists| in prior.

------------------------------------------------------------------------------
                                                          *Sf.pull_md_type_json*
                             `Sf.pull_md_type_json`
Download metadata-type list, e.g. ApexClass, LWC, Aura, FlexiPage, etc. as a Json file into the project root path "md" folder.

------------------------------------------------------------------------------
                                                   *Sf.list_md_type_to_retrieve*
                         `Sf.list_md_type_to_retrieve`
Select a specific metadata-type to download all its files. For example, download all ApexClass files.
Its popup list depends on data retrieved by |Sf.pull_metadata_type_list| in prior.

------------------------------------------------------------------------------
                                                 *Sf.retrieve_apex_under_cursor*
                        `Sf.retrieve_apex_under_cursor`
Uses the word under the cursor as Apex name to attempt to retreive from the org.
A convenient way to quickly pull Apex into local.

------------------------------------------------------------------------------
                                                          *Sf.create_apex_class*
                             `Sf.create_apex_class`
Creates a new Apex Class using an input name or prompting the user to enter one

------------------------------------------------------------------------------
                                                         *Sf.create_aura_bundle*
                            `Sf.create_aura_bundle`
Creates a new Aura Bundle using an input name or prompting the user to enter one

------------------------------------------------------------------------------
                                                          *Sf.create_lwc_bundle*
                             `Sf.create_lwc_bundle`
Creates a new LWC Bundle using an input name or prompting the user to enter one

------------------------------------------------------------------------------
                                                           *Sf.open_test_select*
                             `Sf.open_test_select`
Open a top-split window to display the Apex tests in the current file.

------------------------------------------------------------------------------
                                                           *Sf.run_current_test*
                             `Sf.run_current_test`
Run the Apex test under the cursor.
It uses Treesitter to determine @IsTest method.

------------------------------------------------------------------------------
                                             *Sf.run_current_test_with_coverage*
                      `Sf.run_current_test_with_coverage`
Same as `run_current_test`, but with code coverage info in the result.

------------------------------------------------------------------------------
                                                 *Sf.run_all_tests_in_this_file*
                        `Sf.run_all_tests_in_this_file`
Run all Apex tests in the current Apex file.

------------------------------------------------------------------------------
                                   *Sf.run_all_tests_in_this_file_with_coverage*
                 `Sf.run_all_tests_in_this_file_with_coverage`
Run all Apex tests in the current Apex file, but with code coverage info in the result.

------------------------------------------------------------------------------
                                                          *Sf.repeat_last_tests*
                             `Sf.repeat_last_tests`
A convenient way to repeat the last executed Apex test command.

------------------------------------------------------------------------------
                                                            *Sf.run_local_tests*
                              `Sf.run_local_tests`
Run all local tests in target_org

------------------------------------------------------------------------------
                                                                *Sf.toggle_sign*
                                `Sf.toggle_sign`
show sign icons to indicates uncovered lines from the latest test running result.

------------------------------------------------------------------------------
                                                     *Sf.uncovered_jump_forward*
                          `Sf.uncovered_jump_forward`
When code coverage sign icon is enabled on the current buffer, the cursor jumps to the next uncovered line

------------------------------------------------------------------------------
                                                    *Sf.uncovered_jump_backward*
                          `Sf.uncovered_jump_backward`
When code coverage sign icon is enabled on the current buffer, the cursor jumps to the previous uncovered line

------------------------------------------------------------------------------
                                                               *Sf.create_ctags*
                               `Sf.create_ctags`
Create tags file in the root path by using universal ctags cli tool.

------------------------------------------------------------------------------
                                                      *Sf.create_and_list_ctags*
                           `Sf.create_and_list_ctags`
Create tags file in the root path and list them by fzf plugin.
When fzf is not found, the command exists with an error msg.


 vim:tw=78:ts=8:noet:ft=help:norl: